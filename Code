# 815. Bus Routes
class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:

        if source == target:
            return 0

        queue = deque()

        visited = defaultdict(lambda: False)
        
 
        routes_for_stations = defaultdict(list)
        
        for index, stations in enumerate(routes):
            for station in stations:
                routes_for_stations[station].append(index)
        
        tmp_source_routes = routes_for_stations[source]
        tmp_target_routes = routes_for_stations[target]
        
        if not (tmp_source_routes or tmp_target_routes):
            return -1

        queue.extend(tmp_source_routes)

        for route in tmp_source_routes:
            visited[route] = True
        
        step = 1
        while queue:
            total = len(queue)
            while total > 0:
                route_index = queue.popleft()
                for station in routes[route_index]:
                    if station == target:
                        return step
                    tmp_routes = routes_for_stations[station]
                    for r in tmp_routes:
                        if r != route_index and visited[r] != True:
                            queue.append(r)
                            visited[r] = True
                total -= 1
            step += 1
        

        return -1

#394. Decode String
class Solution:
    def decodeString(self, s: str) -> str:
        stack, res, multi = [], "", 0
        for c in s:
            if c == '[':
                stack.append([multi, res])
                res, multi = "", 0
            elif c == ']':
                cur_multi, last_res = stack.pop()
                res = last_res + cur_multi * res
            elif '0' <= c <= '9':
                multi = multi * 10 + int(c)            
            else:
                res += c
        return res

#2327. Number of People Aware of a Secret
class Solution:
    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
        MOD = 10 ** 9 + 7
        diff = [0] * n
        diff[0] = 1  # f[0] = 1，相当于 diff[0] = 1, diff[1] = -1
        diff[1] = -1
        f = cnt_b = 0
        for i, d in enumerate(diff):
            f = (f + d) % MOD
            if i + delay >= n:
                cnt_b += f
            else:
                diff[i + delay] += f
                if i + forget < n:
                    diff[i + forget] -= f
        return (f + cnt_b) % MOD
